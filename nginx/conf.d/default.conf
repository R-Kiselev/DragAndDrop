# ==============================================================================
# HTTP сервер: редирект на HTTPS и обработка Certbot renewal
# ==============================================================================
server {
    listen 80;
    listen [::]:80; # Для IPv6, если используется

    server_name draganddrop.live www.draganddrop.live;

    # Обработка запросов от Let's Encrypt для обновления сертификатов
    # Этот location должен быть доступен по HTTP
    location /.well-known/acme-challenge/ {
        root /var/www/certbot; # Путь внутри контейнера Nginx, смапленный на ./certbot/www
        allow all; # Явно разрешаем доступ
    }

    # Для всех остальных запросов на HTTP - редирект на HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# ==============================================================================
# HTTPS сервер: основной сервер, обслуживающий приложение
# ==============================================================================
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2; # Для IPv6, если используется

    server_name draganddrop.live www.draganddrop.live;

    # --- SSL Конфигурация ---
    # Пути к сертификатам (внутри контейнера Nginx, смапленные с ./certbot/conf)
    ssl_certificate /etc/letsencrypt/live/draganddrop.live/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/draganddrop.live/privkey.pem;

    # Рекомендуется сгенерировать свои DH параметры для повышения безопасности:
    # На хосте: openssl dhparam -out ./certbot/conf/ssl-dhparams.pem 2048
    # Затем раскомментируйте следующую строку. Убедитесь, что файл доступен по этому пути.
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Рекомендованные SSL протоколы и шифры (Mozilla Intermediate)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off; # Для HTTP/2 лучше off
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

    # Оптимизация SSL сессий
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m; # Примерно 40000 сессий
    ssl_session_tickets off; # Отключаем session tickets для PFS, если не используете TLS 1.3 эксклюзивно

    # --- Заголовки безопасности ---
    # HSTS (HTTP Strict Transport Security) - принудительно использовать HTTPS
    # Включайте, только когда уверены, что HTTPS работает идеально и вы не планируете отключать его.
    # Сначала можно тестировать с max-age=300 (5 минут), потом увеличить.
    # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # X-Frame-Options
    add_header X-Frame-Options DENY always;

    # X-Content-Type-Options
    add_header X-Content-Type-Options nosniff always;

    # Referrer-Policy
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Permissions-Policy (Feature-Policy) - настройте под нужды вашего приложения
    # add_header Permissions-Policy "geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()" always;


    # --- OCSP Stapling ---
    # Улучшает производительность SSL/TLS за счет кеширования ответа OCSP на сервере
    # ssl_stapling on;
    # ssl_stapling_verify on;
    # ssl_trusted_certificate /etc/letsencrypt/live/draganddrop.live/chain.pem; # Используйте chain.pem для этого
    # resolver 8.8.8.8 8.8.4.4 valid=300s; # DNS серверы для OCSP запросов
    # resolver_timeout 5s;


    # --- Проксирование на Frontend ---
    location / {
        proxy_pass http://frontend:3000; # Имя сервиса из docker-compose.yml и его порт

        # Стандартные заголовки для проксирования
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # Важно для определения, что запрос пришел по HTTPS

        # Для WebSocket (если ваш frontend их использует, например, для hot-reloading в dev или других фич)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_redirect off;
        proxy_buffering off; # Может быть полезно для stream-ответов или SSE
    }

    # --- Проксирование на Backend API ---
    location /api/ {
        proxy_pass http://backend:8000/api/; # Имя сервиса из docker-compose.yml и его порт + путь

        # Стандартные заголовки для проксирования
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name; # или $host

        # Для WebSocket (если ваш backend их использует)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_redirect off;
    }

    # --- Логирование (опционально, но полезно для отладки) ---
    # Убедитесь, что директория /var/log/nginx существует в контейнере
    # и Nginx имеет права на запись. По умолчанию это так.
    # access_log /var/log/nginx/draganddrop.live.access.log;
    # error_log /var/log/nginx/draganddrop.live.error.log;

    # --- Обработка ошибок (опционально) ---
    # error_page 500 502 503 504 /50x.html;
    # location = /50x.html {
    #     root /usr/share/nginx/html; # Стандартный путь к страницам ошибок Nginx
    # }
}